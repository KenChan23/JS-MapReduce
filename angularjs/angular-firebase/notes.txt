AngularJS - MV* Framework
          - provide HTML with more functionality
          - excellent documentation
          - well-written books
          - large community
          - superb integration with frameworks such as Ionic

AngularJS Rationale and Data Binding
====================================
====================================

Features
--------
  - ViewModel represents the model for the view and is bound to various UI elements.
  - As the ViewModel changes, the UI elements update themselves. If a value is changed within any of the UI elements, the corresponding ViewModel gets updated. (two-way data binding)
  - The model gets updated whenever the DOM is updated, and vice-versa applies.
  - Use JavaScript objects for data binding.
  - Simplify AJAX communication $http service.
  - Provide a higher level abstraction than $http service with $resource service. Communicate with RESTful APIs.
  - HTTP interceptors handle global errors, authentication or asynchronous/synchronous processing of request, etc.
  - Directives teach HTML new tricks. Build custom HTML elements, attributes, etc.
  - Dependency Injection
  - AngularJS has excellent support for unit testing.

Two Complexities of MVC Frameworks
----------------------------------
  - View becomes complex: utilize a template engine such as Handlebars to dynamically generate front-end
  - Controller becomes complex: keep controllers simple by delegating only data transfer methods to the controller, and leaving the client to display the data

ngApp directive - Autobootstrap AngularJS application
                - Part of ng core module
                - ng module is loaded by default when an AngularJS application is started
                - Designates root element of the application
                - Whenever AngularJS finds the ngApp directive, it loads the module associated with the directive.

Directives: Markers on DOM element (such as attributes, element name, etc.)
            - Directives tell AngularJS's HTML compiler to attach a specified behavior to that DOM element or even transform the DOM element and its children.

Bootstrapping: AngularJS's initialization process.
        Done in Two Ways
            - Automatic Initialization (encounters ngApp directive)
            - Manual Initialization (perform an operation before compilation of page by AngularJS)

{{  }} - renders the value inside of the corresponding variable inside the DOM element. Expression holder

Two Way Data Binding - UI control reflects the value of the underlying model and vice versa.

ng-repeat directive instatiates a template once per item in the follection provided.
Each template instance gets its own scope, and $index is set to the item index or key.

Create a new module:

  angular.module(name, [requires], [configFn])

  * name - name of the module to create or retrieve
  * requires - optional argument. If it is specified, then another module is created. Otherwise, the existing module is retrieved for further configuration
  * configFn - optional argument. Configure the module.

  Store the module inside a variable that is globally accessible. Used to associate controllers, directives, filters, etc.

  Use a controller to establish the initial state of $scope and add behavior to the $scope object.

  Usually set $scope to an object to prevent cluttering the $scope with numerous variables.

ngRoute and ngView - Writing SPAs Easily
----------------------------------------
Configure which views are shown for which URLs using the $routeProvider service.
This service comes from the ngRoute module via the angular-route.js library.

Need angular-route.min.js library.

Links must have a leading # in href attribute to prevent actual navigation to employees.html or departments.html pages.

ng-view serves as a placeholder where HTML contents of various templates are rendered as per the current route.

Other AngularJS Directives
--------------------------
ngShow
ngHide
ngChecked
ngSelected

* Best Practices for AngularJS Structure - https://
docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF
4Q9821Es/pub
* Google JavaScript Style - http://google-styleguide.
googlecode.com/svn/trunk/javascriptguide.xml
* Best Practices for AngularJS - https://github.com/GrumpyWizards/Angular
* AngularJS Style Guide - https://github.com/mgechev/angularjsstyle-
guide

http://yeoman.io - scaffold and establish initial folder structure

Prevent pollution of scope by having a single object with properties serve as multiple variables assigned to a scope.

Working With Data
====================================
====================================

- Dependency Injection
- Filters and writing custom functions
- Calling remote APIs using $http service and $resource service
  ($resource is an abstraction on top of $http service and makes communication with RESTful APIs easier)

Dependency Injection - process of injecting dependencies (or sevices) into another (client) object
--------------------

(also referred as Inversion of Control - IoC)

Without it, a client has to create instances of dependent objects itself, whereas with dependency injection, these objects are handed to the client by someone else.

Dependency Injection is a software design pattern in which an object is given its dependencies, rather than the object creating them itself. It is about removing the hard-coded dependencies and making it possible to change them whenever needed.

http://anandmanisankar.com/posts/angularjs-dependency-injection-demystified/

Example:

    var app = angular.module("DemoApp", []);

    //  Controller is injected with $scope and $http as dependencies
    app.controller("DemoController", function ($scope, $http) {
      $http.get('https://api.github.com/users/angular/repos')
          .success(function (repos) {
          $scope.repos = repos
      });
    });

    //  The controller doesn't know/care how these objects are created. It only knows the contract provided by these objects and how to consume them. AngularJS knows the dependencies by their specific names, so they can be injected in any order!

When the user switches route or reloads a page, AngularJS cleans up the current controller. Hence, its better to not persist data within a controller. Services provide a means for keeping data around for the lifetime of an application while they can be used across different controllers in a consistent manner.
